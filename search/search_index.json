{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Index/","title":"Welcome to build123d noob help","text":"<p>So I found this cool project build123d on github which allows me to transition from OpenScad to something more powerful. Finally easy fillet! Bang! GREAT!  </p> <p>DARN! I need to learn a lot of new commands - hey I am not stupid I can do that!</p> <p>DARN! It's probably wise to use VSCode - I have some experience with it but ... well not much.</p> <p>DARN! I am a noob a few of the documentation examples are not self explanatory enough for me.</p> <p>GREAT! There is a discord out there (and BELIEVE ME these guys there are soooo helpfull)</p> <p>UH! Some of the stuff they tell and teach me I need to understand my own way first - the noob way.</p> <p>So yes I am a noob and they are coders. For coders they are immensely nice but they are Neo in the matrix and I did not (yet!) take the red pill.</p> <p>So I found out that github offers the possibility to host static web sites. Also I have my own unique view on things and how I understand problems.</p> <p>Also learning requires repetition. To be able to repeat you need to document and many times in your own words and explanations. So I decided to set up my own documentation and to share it on the internet - so maybe someone else might also profit.</p> <p>My intention ist to describe code examples and functions in my way which might have a different perspective than someone who is an accomplished coder allready.</p> <p>Beside that as I am a noob there might be \"wrong\" explanations (you know how you explain to your kids the thing about the bees and flowers .. don't you?) and others might be plain wrong (humor me).</p> <p>Otherwise feel free to correct me or make helpfull improvements!</p>"},{"location":"Function%20description/1D%20Objects/1D%20Line/","title":"1D Line","text":""},{"location":"Function%20description/1D%20Objects/1D%20Line/#build-a-rectangle-of-lines","title":"Build a rectangle of lines","text":"<p>```python linenums=\"1\"</p>"},{"location":"Function%20description/1D%20Objects/1D%20Line/#import-ocp_vscode-which-is-an-addon-to-view-the-3d-model-in-vscode","title":"Import ocp_vscode which is an addon to view the 3D model in VScode","text":"<p>from ocp_vscode import *</p>"},{"location":"Function%20description/1D%20Objects/1D%20Line/#import-build123d-library-to-be-able-to-use-build123-commands","title":"Import build123d library to be able to use build123 commands","text":"<p>from build123d import *</p>"},{"location":"Function%20description/1D%20Objects/1D%20Line/#define-an-x-and-y-value-for-the-rectangle","title":"Define an x and y value for the rectangle","text":"<p>x=20 y=10</p>"},{"location":"Function%20description/1D%20Objects/1D%20Line/#start-the-line-builder-and-define-the-name-of-the-finished-line-object-as-rectangleoflines","title":"Start the Line Builder and define the name of the finished line object as RectangleOfLines","text":"<p>with BuildLine() as RectangleOfLines:   # Define first line   Line((0,0),(x,0))   # Define second line   Line((x,0),(x,y))   # Define third line   Line((x,y),(0,y))   # Define fourth and last line to close the rectangle shape   Line((0,y),(0,0))</p>"},{"location":"Function%20description/1D%20Objects/1D%20Line/#show-all-created-objects-which-is-only-rectangleoflines","title":"Show all created objects which is only RectangleOfLines","text":"<p>show_all() ```</p> <p>Line building can be very helpfull if you have irregular shapes which you want to build with other 1D objects like:</p> <ul> <li>Bezier</li> <li>CenterArc</li> <li>EllipticalCenterArc</li> <li>FilletPolyline</li> <li>Helix</li> <li>IntersectingLine</li> <li>JernArc</li> <li>Line</li> <li>PolarLine</li> <li>Polyline</li> <li>RadiusArc</li> <li>SagittaArc</li> <li>Spline</li> <li>TangentArc</li> <li>ThreePointArc</li> </ul> <p>For multi edged forms you can use 2D polyline. Also there are predefined 2D shapes  like rectangles, triangles or circle.</p> <p>To extrude the form you have created from 1D commands and use it for further building you will need to make a 2D sketch out of it. </p> <p>This will create a so called face.</p> <p>See: [[2D Rectangle]]</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/","title":"2D Rectangle","text":""},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#rectangle-of-lines","title":"Rectangle of Lines","text":"<p>```python linenums=\"1\"</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#import-ocp_vscode-which-is-an-addon-to-view-the-3d-model-in-vscode","title":"Import ocp_vscode which is an addon to view the 3D model in VScode","text":"<p>from ocp_vscode import *</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#import-build123d-library-to-be-able-to-use-build123-commands","title":"Import build123d library to be able to use build123 commands","text":"<p>from build123d import *</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#define-an-x-and-y-value-for-the-rectangle","title":"Define an x and y value for the rectangle","text":"<p>x=20 y=10</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#start-the-sketch-builder-which-creates-2d-sketch-objects","title":"Start the Sketch builder which creates 2D sketch objects","text":"<p>with BuildSketch() as RectangleAsSketch:   # Start the Line Builder and define the name of the finished line object as RectangleOfLines   with BuildLine() as RectangleOfLines:     # Define first line     Line((0,0),(x,0))     # Define second line     Line((x,0),(x,y))     # Define third line     Line((x,y),(0,y))     # Define fourth and last line to close the rectangle shape     Line((0,y),(0,0))   # Create a face from your RectangleOfLines object. Lines must be closed to encompass a closed area.   make_face()</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#show-all-created-objects-which-is-only-rectangleoflines","title":"Show all created objects which is only RectangleOfLines","text":"<p>show_all()</p> <pre><code>\nThis creates a 2D sketch and a new object RectangleAsSketch. This sketch can be extruded to get a 3D object.\n\nSee: 3D Box\n\n## 2D Rectangle\n\n```python linenums=\"1\"\n# Import ocp_vscode which is an addon to view the 3D model in VScode\nfrom ocp_vscode import *\n# Import build123d library to be able to use build123 commands\nfrom build123d import *\n\n# Define an x and y value for the rectangle\nx=20\ny=10\n\n# Start the Sketch builder which creates 2D sketch objects\nwith BuildSketch() as RectangleAsSketch:\n  Rectangle(x,y)\n\n# Show all created objects which is only RectangleOfLines\nshow_all()\n</code></pre> <p>This gives the same sketch object as the one we created with RectangleOfLines. You might notice that we needed less information AND that this object will now be centered at the origin (x=0,y=0). All objects will normally be build by being centered as each object has an additional property called \"alignt\" which has as default the center option. So to make it truly equal we have to adjust it's placing.</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#placing-with-align","title":"Placing with \"align\"","text":"<p>``` python linenums=\"1\"</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#import-ocp_vscode-which-is-an-addon-to-view-the-3d-model-in-vscode_1","title":"Import ocp_vscode which is an addon to view the 3D model in VScode","text":"<p>from ocp_vscode import *</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#import-build123d-library-to-be-able-to-use-build123-commands_1","title":"Import build123d library to be able to use build123 commands","text":"<p>from build123d import *</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#define-an-x-and-y-value-for-the-rectangle_1","title":"Define an x and y value for the rectangle","text":"<p>x=20 y=10</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#start-the-sketch-builder-which-creates-2d-sketch-objects_1","title":"Start the Sketch builder which creates 2D sketch objects","text":"<p>with BuildSketch() as RectangleAsSketch:   # Create a Rectangle and change it's alignment property   Rectangle(x,y,align=(Align.MIN,Align.MIN))</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#show-all-created-objects-which-is-only-rectangleoflines_1","title":"Show all created objects which is only RectangleOfLines","text":"<p>show_all() ```</p> <p>The \"align=\" options you can choose from are:</p> <ul> <li>Align.MIN</li> <li>Align.MAX</li> <li>Align.CENTER</li> </ul> <p>You can use each of these options for one of the 2 paramters of the \"align=\" statement.</p>"},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#placing-with-the-position-property-of-the-object","title":"Placing with the position property of the object","text":""},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#placing-with-the-pos-command","title":"Placing with the POS() command","text":""},{"location":"Function%20description/2D%20Objects/2D%20Rectangle/#other-options-to-create-a-rectangle-or-a-edged-2d-shape","title":"Other options to create a rectangle or a edged 2D shape","text":"<p>Other ways to create a rectangle is to use the Rectangle, Polygon,  RegularPolygon or Trapezoid.</p> <p>See: Polygon</p> <p>See: RegularPolygon</p> <p>See: Trapezoid</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Foreword%20working%20environment/","title":"Testtitle","text":"<p>I found out that github offers the possibility to host static web sites. I am currently following up a hand full of projects of my own and as most of them are new to me I have my own unique view on them and my own problems to understand certain aspects.</p> <p>In short I am a noob :)</p> <p>The internet has a vast fundus of information but learning requires repetition. To be able to repeat you need to document and many times in your own words and explanations. So I decided to set up my own documentation and to share it on the internet - so maybe someone else might also profit.</p> <p>Most projects require a certain working enviroment setup. Beeing a noob most often allready setting up a working enviroment is a challenge.</p> <p>I currently still use mostly windows so unless I switch to linux or do a parallel setup you probably will find a windows solution.</p> <p>Most important though I prefere a stand alone solution or portable version as it is most often called.  There are 3 reasons I prefere a portable setup:</p> <ol> <li>A portable version allows for easy deletion if I decide to no longer use a certain setup.</li> <li>It allows me to experiment with similar but slightly different setups without messing up my currently activly used setup.</li> <li>I can give it to a friend with ease</li> </ol>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/","title":"MkDocs portable Installation","text":"<p>(not necessary for build123d)</p> <p>MkDocs is a python solution to build static websites from markdown files. I am using Obsidian MD for my notetaking. So my intention was to just document once in Obsidian MD and to create my static documentation website from one source in one workflow. Once I reviewed the static website and once I am satisfied with the website I can go on and publish it to github. </p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#1-python-enviroment-for-mkdocs","title":"1) Python enviroment for MkDocs","text":"<p>Download WinPython 3.11.8 from Sourceforge: WinPython - 3.11.8</p> <p>You find all WinPython Versions under this link: WinPython</p> <p>WinPython is a portable setup of the Python runtime enviroment for windows. After downloading the file double click it (and thus execute it). You might need to tell windows or your browser that the file is safe and that you want to keep it and that you want to execute it.</p> <p>After starting you will be asked to extract it. Choose a location where you want your files to be extracted to. For example: D:\\Portable_MkDocs</p> <p>Thats it your Python enviroment is setup and ready to run.</p> <p>Go into the directory where you installed your Python enviroment (D:\\Portable_MkDocs\\WPy64-31180) and start \"WinPython Powershell Prompt.exe\".</p> <p>This will open the windows Powershell. You can check your Python version by typing: python --version.  Also check if your paket manager pip is installed by typing:  pip --version</p> <p></p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#2-install-mkdocs","title":"2) Install MkDocs","text":"<p>Website MkDocs: MkDocs</p> <p>To install MkDocs you need to install it with a paket manager into your python environment. To do so we will use pip which is the pre installed paket manager in WinPython.</p> <p>Type: pip install mkdocs</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#3-install-a-theme","title":"3) Install a Theme","text":"<p>For my documentation the material theme seemed most usefull. Material is a theme which is widely used and also supported by many plugins.</p> <p>You find informations for the material theme here: Material theme</p> <p>To install type: pip install mkdocs-material</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#4-install-plugins","title":"4) Install plugins","text":"<p>I installed several plugins which extend and enhance MkDocs</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#roamlinks-plugin","title":"Roamlinks plugin","text":"<p>This plugin allows to keep the links you defined in your markdown and change them to working links in your static site.</p> <p>You find the plugin here: mkdocs-roamlinks-plugin</p> <p>Install the plugin by typing: pip install mkdocs-roamlinks-plugin</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#awesom-pages-plugin","title":"Awesom pages plugin","text":"<p>This plugin allows to configure your page navigation, your page naming and your page configuration in more detail.</p> <p>You find the plugin here: awesome-pages-plugin</p> <p>Install the plugin by typing: pip install mkdocs-awesome-pages-plugin</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#5-configuring-mkdocs-and-creating-a-static-website","title":"5) Configuring MkDocs and creating a static website","text":"<p>To create your first project go into the directory where you installed your Python enviroment (D:\\Portable_MkDocs\\WPy64-31180) and start \"WinPython Powershell Prompt.exe\".</p> <p>In the windows powershell type:  mkdocs new Testproject</p> <p>This will create a new project and a new directory \"Testproject\". You will find this new directory and your Projektfiles in  \"D:\\Portable_MkDocs\\scripts\\Testproject\"</p> <p>Type: cd Testproject This let's you change into the Testproject directory.</p> <p>You need to create a YAML file in the Testproject directory. This file is reponsible for defining the parameters how MkDocs builds your static website.  </p> <p>For details see: Setup - Material for MkDocs</p> <p>```yaml linenums=\"1\" site_name: Build123d Noob help</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#site_url-httpsgithubcomcepeubuild123-for-noobs","title":"site_url: https://github.com/CePeU/build123-for-noobs","text":"<p>theme:     name: material     #repo_url: https://github.com/CePeU/build123-for-noobs.git     features:         #- search.highlight # Highlight all occurences of search after selecting link         - search.share # allows for a share button after searching         #- header.autohide # hides the header uppon scrolling use for more screen size?         - content.code.copy # Renders a copy button in the code block         - content.code.select         - content.code.annotate         - navigation.path         - toc.integrate # Integrates the left side table of content into the navigation to the right         #- toc.follow # Not sure yet what it does         - navigation.top # Back to top button is rendered uppon startin to scroll back to top         - navigation.tabs # top-level sections are rendered at the TOP in a menu layer below the header for viewports above 1220px, but remain as-is on mobile         - navigation.tabs.sticky # scrolling does not \"hide\" tabs         #- navigation.sections # groups first/second level into groups but disables folding. Looks nice but gets too long         #- navigation.expands # will expand alls collapsed subsection as default         #- navigation.prune # Will need to considere if site gets above 100+ pages</p> <p>markdown_extensions:     - toc:         toc_depth: 4 # increase toc depth to 4     #    permalink: true # Can add a anchor link     - pymdownx.highlight:     #    anchor_linenums: true     #    line_spans: __span     #    pygments_lang_class: true     #- pymdownx.inlinehilite # python code block highlighting? Also adds linenumbering!     #- pymdownx.snippets     - pymdownx.superfences # adds linenumbers!</p> <p>plugins:   - roamlinks # Plugin for translating markdown links to local and external links   - search: # Enables search. If plugins are used search must be explicitly enabled         lang: en # the site language will be english so searching in english makes sense   - privacy # Loads all external assets before build</p> <pre><code>\nType ***mkdosc serve***\nThis starts a local webserver and generates your website from the markdown files found in \"D:\\\\Portable\\_MkDocs\\\\scripts\\\\Testproject\".  \n\nYou can see the newly generated website by opening a browser and typing ***localhost:8000***\n\nSee more details also on the MkDocs website: [Getting Started - MkDocs](https://www.mkdocs.org/getting-started/)\n\n## 7) Getting your Obsidian markdown files to MkDocs\n\nCurrently I use an Obsidian community plugin: \"markdown-export\"\n\nGithub: [markdown-export](https://github.com/bingryan/obsidian-markdown-export-plugin)\n\nThe file structure of the local export directory needs to be:\n\n</code></pre> <p>Testproject     --&gt; mkdocs.yml   |-- .git     --&gt; for git integration   |-- .cache --&gt; will be created by mkdocs during export   |-- docs   --&gt; index.md   |      |-- subfolders  --&gt; keeping additional markdown files ```</p> <p>As I needed some adjustment in the export files so that screenshots are correctly included into my static html I had to extend the plugin with a regex/replace ability. Currently that is pending pull request and I am not acquainted enough yet with github and the whole toolchain to publish it on my own. It took me allready some time to figure out how to setup TypeScript for Obsidian MD and how to improve the plugin.</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#8-creating-your-static-website-to-deploy-to-github","title":"8) Creating your static Website to deploy to github","text":"<p>I take my notes in a documentation folder in Obsidian MD. I adjusted the markdown-export plugin to have an output directory into the MkDocs Testproject/docs folder and export into that folder.  Then I start Mkdocs and build the static site typing: mkdocs serve</p> <p>After controlling the build static website I upload it to github by typing mkdocs gh-deploy</p> <p>Future improvements: - Improve markdown export with a profile setting - maybe use another plugin Github Publisher (but I did not figure out yet if you can export localy) - Setup a workflow on Github to build everything there from markdown files  </p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/OCP%20Viewer%20adjustments/","title":"OCP Viewer adjustments","text":"<p>You can influence how the OCP Viewer works. There are some settings which I find very helpfull.</p> <p>This is the setup I use as a template for starting a build123d project.</p> <p>```python linenums=\"1\" from build123d import * from ocp_vscode import * set_defaults(reset_camera=Camera.KEEP, ortho=True, black_edges=True,measure_tools=True) colors = [\"red\",\"blue\",\"pink\",\"green\",\"orange\",\"indigo\",\"yellow\",\"grey\",\"white\"]</p> <p>show_all(colors=colors) ```</p> <p>Explanation</p> <p>Line 1: This imports the code needed for build123</p> <p>Line 2:  This imports the code needed for OCP Viewer</p> <p>Line 3:</p> <p>Camera.Keep: This will keep the perspective of the camera even after you changed your code and after letting it run again.</p> <p>ortho=True:</p> <p>black_edges=True: This will outline the outer edges more starkly</p> <p>measure_tools=True This will add measure tools.</p> <p>Line 4: This will color each new object in the color mentionen (so first is red, second is blue etc.)</p> <p>Line 5: Write your code here</p> <p>Line 6: Shows all objects and colors them.</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/","title":"Visual Studio Code Windows Portable Setup for build123d","text":""},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#1-python-enviroment-for-build123d","title":"1) Python enviroment for build123d","text":"<p>Download WinPython 3.11.8 from Sourceforge: WinPython - 3.11.8</p> <p>You find all WinPython Versions under this link: WinPython</p> <p>WinPython is a portable setup of the Python runtime enviroment for windows. After downloading the file double click it (and thus execute it). You might need to tell windows or your browser that the file is safe and that you want to keep it and that you want to execute it.</p> <p>After starting you will be asked to extract it. Choose a location where you want your files to be extracted to. For example: D:\\Portable_build123d</p> <p>Thats it your Python enviroment is setup and ready to run.</p> <p>Go into the directory where you installed your Python enviroment (D:\\Portable_MkDocs\\WPy64-31180) and start \"WinPython Powershell Prompt.exe\".</p> <p>This will open the windows Powershell. You can check your Python version by typing: python --version. Also check if your paket manager pip is installed by typing:  pip --version</p> <p></p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#2-install-visual-studio-code","title":"2) Install Visual Studio Code","text":"<p>Next you need to download Visual Studio Code but you need to select the ZIP version for X86: Download Visual Studio Code</p> <p>Extract the downloaded file into the Folder D:\\Portable_build123d\\WPy64-31160\\t</p> <p>After extracting the files create a \"data\" directory in D:\\VSCodePython\\WPy64-31160\\t</p> <p>The \"data\" directory is needed to make VSCode portable. It is needed for config files and extensions which VSCode will save there.</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#3-install-git-portable","title":"3) Install Git Portable","text":"<p>Next download Git Portable. Select the \"64-bit Git fot Windows Portable\" Version: 64-bit Git for Windows Portable</p> <p>As it is a portable version you can extract it anywhere you want. But it is a good idea to put it into the same folder as your other files. As all Visual Studio Code data ist saved into the data folder I will install Git also into the data folder.</p> <p>D:\\Portable_build123d\\WPy64-31180\\t\\data\\Git</p> <p>Adjust the Visual Studio code settings.json which you will find in D:\\Portable_build123d\\WPy64-31180\\t\\data\\user-data\\User</p> <pre><code>{\n    \"security.workspace.trust.untrustedFiles\": \"open\",\n    \"git.enabled\": true,\n    \"git.path\": \"D:\\\\Portable_build123d\\\\WPy64-31180\\\\t\\\\data\\\\Git\\\\bin\\\\git.exe\"\n}\n</code></pre> <p>(only the git.path and git.enabled entry is needed which you need to add)</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#3-install-visual-studio-code-extensions","title":"3) Install Visual Studio Code extensions","text":"<p>Test that VSCode starts by using/starting: D:\\VSCodePython\\WPy64-31160\\VS Code.exe</p> <p>VSCode.exe works as a starter for VScode which was included by Winpython.</p> <p>Open the extension manager with CTRL+SHIFT+X</p> <p>Search for the Visual Studio Code Extension \"Python\" and install it.</p> <p>Install the Visual Studio Code Extension \"OCP CAD Viewer\"</p> <p>After installing the OCP CAD Viewer extension you will find a new icon \"OCP\". Select the OCP Icon and install build123d and/or Quickstart CadQuery</p> <p></p> <p>Follow the instructions to use OCP CAD Viewer extension to install Cadquery/build123 which will install the different necessary python packages using pip.</p> <p>Thats it. Remember to add \" from ocp_vscode import * \" to your Cadquery/build123d files to be able to use OCP Cad Viewer.  This should be the two first lines.</p> <pre><code>from ocp_vscode import *\nfrom build123d import *\n</code></pre>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20extensions%20or%20adjustments/","title":"Visual Studio Code extensions or adjustments","text":"<p>Extenstions are a purely subjective matter. Still some ideas might come from this for anybody reading this.</p> <p>frame-indent-rainbow: frame-indent-rainbow - Visual Studio Marketplace         A plugin to show code blocks by color</p> <p>OCP-CAD Viewer: OCP CAD Viewer - Visual Studio Marketplace</p> <p>Pylance: Pylance - Visual Studio Marketplace </p>"}]}