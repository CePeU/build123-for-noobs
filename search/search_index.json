{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to build123d noob help","text":"<p>So I found this cool project build123d on github which allows me to transition from OpenScad to something more powerful. Finally easy fillet! Bang! GREAT!  </p> <p>DARN! I need to learn a lot of new commands - hey I am not stupid I can do that!</p> <p>DARN! It's probably wise to use VSCode - I have some experience with it but ... well not much.</p> <p>DARN! I am a noob a few of the documentation examples are not self explanatory enough for me.</p> <p>GREAT! There is a discord out there (and BELIEVE ME these guys there are soooo helpfull)</p> <p>UH! Some of the stuff they tell and teach me I need to understand my own way first - the noob way.</p> <p>So yes I am a noob and they are coders. For coders they are immensely nice but they are Neo in the matrix and I did not (yet!) take the red pill.</p> <p>So I found out that github offers the possibility to host static web sites. Also I have my own unique view on things and how I understand problems.</p> <p>Also learning requires repetition. To be able to repeat you need to document and many times in your own words and explanations. So I decided to set up my own documentation and to share it on the internet - so maybe someone else might also profit.</p> <p>My intention ist to describe code examples and functions in my way which might have a different perspective than someone who is an accomplished coder allready.</p> <p>Beside that as I am a noob there might be \"wrong\" explanations (you know how you explain to your kids the thing about the bees and flowers .. don't you?) and others might be plain wrong (humor me).</p> <p>Otherwise feel free to correct me or make helpfull improvements!</p> <p>You find the documentation of build123d here: Overview \u2014 build123d documentation</p> <p>The Github page is: build123d</p> <p>My Own Page is: Build123d for noobs (cepeu.github.io)</p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Creating%20a%20primitive/","title":"Creating a primitive","text":"<p>Take a look at the primitive section.</p> <p>Generally speaking build123d has two modes of operation which also can be mixed together.</p> <p>One mode is algebra mode wich is similar to what OpenScad is using. The second one which I will be mostly using for now is builder mode.</p> <p>See also: </p> <p>Key Concepts (builder mode) \u2014 build123d 0.5.1.dev45+gaf4e729 documentation</p> <p>Key Concepts (algebra mode) \u2014 build123d 0.5.1.dev45+gaf4e729 documentation</p> <p>Builders \u2014 build123d 0.5.1.dev45+gaf4e729 documentation)</p> <p>Build123 deviates a bit from what you are probably used in OpenScad that it also works more like \"regular\" CAD designing. It is often a good idea (also performance wise) to create a 2D sketch and extrude it.</p> <p>Still build123 leaves it up to you what and how you are going to do anything. </p> <p>Neat! :)</p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Mirroring%20an%20object/","title":"Mirroring an object","text":"<p>First we create a rectangle which is a 2D object so we use BuildSketch. <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestMirrorSketch:\n    #Creates a Rectangle\n    Rectangle(20,10)\nshow_all()\n</code></pre></p> <p></p> <p>Next we place it in the first quadrant with 0,0 in the lower left corner.  <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestMirrorSketch:\n    # Creates a rectangle and centers and places it at 0,0 \n    Rectangle(20,10,align=(Align.MIN,Align.MIN))\n    # Imagine for purpose of choosing the correct Align MIN/MAX combination\n    # that 0,0 is in the upper right corner and numbering goes to the left\n    # and downward. So x=Aling.MIN and y=Align.MAX would place your\n    # rectangle in the second clockwise quadrant.\nshow_all()\n</code></pre></p> <p></p> <p>The next step is to mirror the 2D object along the Y Axis. To do so we need to define the plane which we are going to use as mirror. The plane that we need to use is YZ. <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestMirrorSketch:\n    # Creates a rectangle and centers and places it at 0,0 \n    Rectangle(20,10,align=(Align.MIN,Align.MIN))\n    # We mirror the rectangle\n    mirror(about=Plane.YZ)\n\nshow_all()\n</code></pre></p> <p></p> <p>So what did we get? We did get a mirror but we also got a copy/bigger face object because the mode of this operation was the default \"ADD\". If we extrude this we would get a block of 40x10xh.</p> <p>If we only want out orginal object we need to set a mode for mirror (or the new mirror object) to \"REPLACE\". <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestMirrorSketch:\n    # Creates a rectangle and centers and places it at 0,0 \n    Rectangle(20,10,align=(Align.MIN,Align.MIN))\n    # We mirror the rectangle and replace it\n    mirror(about=Plane.YZ,mode=Mode.REPLACE)\n\nshow_all()\n</code></pre></p> <p></p> <p>We also can set an arbitrary mirror plane. We do this the same way as before. We define a plane but we also move it with offset.</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestMirrorSketch:\n    # Creates a rectangle and centers and places it at 0,0 \n    Rectangle(6,5,align=(Align.MIN,Align.MIN))\n    # We mirror the rectangle\n    mirror(about=Plane.YZ.offset(amount=3),mode=Mode.REPLACE)\n\nshow_all()\n</code></pre> <p>As it is a default YZ plane at x=0 we move it along the X-Axis by +6 to the right. Then the mirror takes place and the whole object is mirrored at x=6 on a XY plane. (Please note I had to change the size of the rectangle)</p> <p></p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Rotating%20an%20Object/","title":"Rotating an Object","text":"<p>In build mode rotation can be accomplished as an additional parameter while constructing your primitive. Each 2D or 3D object has a rotation parameter.</p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Rotating%20an%20Object/#rotating-an-object-by-build-parameter","title":"Rotating an object by build parameter","text":"<p>First we create a rectangle: <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestRotationSketch:\n    # Creates a rectangle\n    Rectangle(6,5)\n\nshow_all()\n</code></pre></p> <p></p> <p>We then rotatet that rectangle by 45 degrees. <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestRotationSketch:\n    # Creates a rectangle and rotates it by 45 degrees\n    # EACH 2D or 3D object as a rotation parameter\n    Rectangle(6,5,rotation=45)\n\nshow_all()\n</code></pre></p> <p></p> <p>This can also be written as:</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestRotationSketch:\n    # Creates a rectangle and rotates it by 45 degrees\n    Rectangle(6,5,45)\n\nshow_all()\n</code></pre>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Rotating%20an%20Object/#rotation-by-location-object","title":"Rotation by Location Object","text":"<p>Creating a location object. <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildSketch() as TestRotationSketch:\n    # Creates a Locations LIST which contains a Location object\n    with Locations(Rotation(0,0,45)):\n        # Creates a rectangle and rotates it by 45 degrees\n        Rectangle(6,5)\n\nshow_all()\n</code></pre></p> <p>This Version ist different in that it creates a location OBJECT in a location LIST to show this better we switch to a cube/box.</p> <p>Danger</p> <p>Location creates an object!</p> <p>Locations expects a LIST of location objects  (Locations ! &lt;== locationS)</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestRotationSPart:\n    # Creates a Locations LIST which contains a Location object\n    with Locations(Rotation(0,0,45)):\n        # Creates a cube and rotates it by 45 degrees\n        Box(6,5,3)\n\nshow_all()\n</code></pre> <p></p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestRotationSPart:\n    # Creates a Locations LIST which contains a Location object\n    with Locations(Rotation(0,30,45)):\n        # Creates a cube and rotates it by Y=30 and Z=45 degrees\n        Box(6,5,3)\n\nshow_all()\n</code></pre> <p></p> <p>Now the rotation took place in two dimensions Y and Z. The distincion still is that this time a we created a location. A Locations LIST can have several locations. Also each Location can have a position AND rotation!</p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Rotating%20an%20Object/#rotation-and-placing-by-location-object","title":"Rotation AND placing by Location Object","text":"<pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestRotationSPart:\n    # Creates TWO locations in the Locations LIST\n    with Locations(Location((0,0,0),(0,30,45)),Location((10,10,0),(45,20,0))):\n        # Creates a cube at EACH Location in the Location LIST and rotates it\n        Box(6,5,3)\n\nshow_all()\n</code></pre> <p>Now we created two location objects in the Locations LIST. Location can take several parameter COMBINATIONS:</p> <p>1) Just a Location (point in space):  Location((x,y,z)) 2) Location and Rotation:  Location((x,y,z),(x_angle,y_angle,z_angle)) 3) Location on a plane:  Location(Plane.YZ) 4) Location on a Plane with a point on that plane: Location(Plane.XZ,(x,y,z))  </p> <p>In VScode you can see that Location takes up to 10 different combinations of input from planes, rotations, vectors, angles and orderings. </p> <p></p> <p>The Location object is the object to place your objects and it can be written much shorter and also nested.</p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Rotating%20an%20Object/#version-1-two-locations-short-form","title":"Version 1 - two locations short form","text":"<pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestRotationSPart:\n\n    with Locations((0,0,0),(10,10,0)):\n        # Creates two cubes at two locations\n        Box(6,5,3)\n\nshow_all()\n</code></pre> <p>Version 2- two locations prepared for nesting <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestRotationSPart:\n\n    with Locations((0,0,0)):\n        # Creates a cube at 0,0,0\n        Box(6,5,3)\n    with Locations((10,10,0)):\n        # Creates a cube at 10,10,0\n        Box(6,5,3)\n\nshow_all()\n</code></pre></p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Rotating%20an%20Object/#version-3-two-locations-with-a-nested-and-parameter-rotation","title":"Version 3 - two locations with a nested and parameter rotation","text":"<pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestRotationSPart:\n    # Places an object at 0,0,0\n    with Locations((0,0,0)):\n        # Creates a cube and rotates it by 45 degrees\n        Box(6,5,3,rotation=(0,30,45))\n    # Places an object at 10,10,0   \n    with Locations((10,10,0)):\n        # Rotates an object\n        with Locations(Rotation(45,20,0)):\n            # Creates a cube\n            Box(6,5,3)\n\nshow_all()\n</code></pre> <p>As you can see this is exactly the same as one of our former examples.</p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Rotating%20an%20Object/#version-4-two-locations-with-a-nested-and-parameter-rotation-and-placing-on-a-different-plane","title":"Version 4 - two locations with a nested and parameter rotation and placing on a different plane","text":"<pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestRotationSPart:\n\n    with Locations((0,0,0)):\n        # Creates a cube and rotates it by 45 degrees\n        Box(6,5,3,rotation=(0,30,45))\n    with Locations((10,10,0)):\n        with Locations(Rotation(45,20,0)):\n            # Creates a cube and rotates it by 45 degrees\n            Box(6,5,3)\n\nshow_all()\n</code></pre> <p>Tip</p> <p>Take a deeper look here:  Key Concepts (builder mode) \u2014 build123d 0.4.1.dev78+gd9ef5b0 documentation</p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Translating%20an%20Object/","title":"Translating an Object","text":"<p>Most of the times you will translate your Object in the builder by using location objects in a locations list. (See also: Rotating an Object)</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestPart:\n    # Creates TWO locations in the Locations LIST\n    with Locations(Location((0,0,0)),Location((10,10,0))):\n        # Creates a cube at EACH Location in the Location LIST \n        Box(6,5,3)\n\nshow_all()\n</code></pre> <p>This can be written in short:</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestPart:\n    # Creates TWO locations in the Locations LIST\n    with Locations((0,0,0),(10,10,0)):\n        # Creates a cube at EACH Location in the Location LIST \n        Box(6,5,3)\n\nshow_all()\n</code></pre> <p>Other ways to change postion is:</p> <p>Pos(): Description needed move: Description needed offset: Description needed</p>"},{"location":"Migrating%20from%20OpenScad/Build%20mode/Union%20and%20difference/","title":"Union and difference","text":"<p>The Builder in itself is adding each element to the other (or subtracting it) according to the parameter choosen for the object created.</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestPart:\n    # Creates a Box\n        Box(6,5,3)\n    # Subtracts a cylinder\n        Cylinder(radius=2,height=4,mode=Mode.SUBTRACT)\n    # Subtract a Torus\n        Torus(major_radius=5,minor_radius=2)\n\nshow_all()\n</code></pre> <p>The mode=Mode.ADD is the default that's why it is not needed to write it again.</p> <p>Now what if we constructed two parts and want them to add together?</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, black_edges=True,center_grid=True)\n\nwith BuildPart() as TestPart:\n    # Creates a Box\n        Box(6,5,3)\n    # Subtracts a cylinder\n        Cylinder(radius=2,height=4,mode=Mode.SUBTRACT)\n    # Add a Torus\n        Torus(major_radius=5,minor_radius=2)\n\nwith BuildPart() as TestPartII:\n    # Add a Torus\n        Torus(major_radius=5,minor_radius=2)\n\nwith BuildPart() as AllTogether:\n    # Add Box\n    add(TestPart)\n    # Add Torus\n    add(TestPartII)\n\nshow_object(AllTogether)\n</code></pre>"},{"location":"Primitives/1D%20Objects/1D%20Line/","title":"1D Line","text":""},{"location":"Primitives/1D%20Objects/1D%20Line/#build-a-rectangle-of-lines","title":"Build a rectangle of lines","text":"<pre><code># Import ocp_vscode which is an addon to view the 3D model in VScode\nfrom ocp_vscode import *\n# Import build123d library to be able to use build123 commands\nfrom build123d import *\n\n# Define an x and y value for the rectangle\nx=20\ny=10\n\n# Start the Line Builder and define the name of the finished line object as RectangleOfLines\nwith BuildLine() as RectangleOfLines:\n  # Define first line\n  Line((0,0),(x,0))\n  # Define second line\n  Line((x,0),(x,y))\n  # Define third line\n  Line((x,y),(0,y))\n  # Define fourth and last line to close the rectangle shape\n  Line((0,y),(0,0))\n\n# Show all created objects which is only RectangleOfLines\nshow_all()\n</code></pre> <p>Line building can be very helpfull if you have irregular shapes which you want to build with other 1D objects like:</p> <ul> <li>Bezier</li> <li>CenterArc</li> <li>EllipticalCenterArc</li> <li>FilletPolyline</li> <li>Helix</li> <li>IntersectingLine</li> <li>JernArc</li> <li>Line</li> <li>PolarLine</li> <li>Polyline</li> <li>RadiusArc</li> <li>SagittaArc</li> <li>Spline</li> <li>TangentArc</li> <li>ThreePointArc</li> </ul> <p>For multi edged forms you can use 2D polyline. Also there are predefined 2D shapes  like rectangles, triangles or circle.</p> <p>To extrude the form you have created from 1D commands and use it for further building you will need to make a 2D sketch out of it. </p> <p>This will create a so called face.</p> <p>See: 2D Rectangle</p>"},{"location":"Primitives/2D%20Objects/2D%20Rectangle/","title":"2D Rectangle","text":""},{"location":"Primitives/2D%20Objects/2D%20Rectangle/#rectangle-of-lines","title":"Rectangle of Lines","text":"<pre><code># Import ocp_vscode which is an addon to view the 3D model in VScode\nfrom ocp_vscode import *\n# Import build123d library to be able to use build123 commands\nfrom build123d import *\n\n# Define an x and y value for the rectangle\nx=20\ny=10\n\n# Start the Sketch builder which creates 2D sketch objects\nwith BuildSketch() as RectangleAsSketch:\n  # Start the Line Builder and define the name of the finished line object as RectangleOfLines\n  with BuildLine() as RectangleOfLines:\n    # Define first line\n    Line((0,0),(x,0))\n    # Define second line\n    Line((x,0),(x,y))\n    # Define third line\n    Line((x,y),(0,y))\n    # Define fourth and last line to close the rectangle shape\n    Line((0,y),(0,0))\n  # Create a face from your RectangleOfLines object. Lines must be closed to encompass a closed area.\n  make_face()\n\n# Show all created objects which is only RectangleAsSketch\nshow_all()\n</code></pre> <p>This creates a 2D sketch and a new object RectangleAsSketch. This sketch can be extruded to get a 3D object.</p> <p>See: 3D Cube</p>"},{"location":"Primitives/2D%20Objects/2D%20Rectangle/#2d-rectangle","title":"2D Rectangle","text":"<pre><code># Import ocp_vscode which is an addon to view the 3D model in VScode\nfrom ocp_vscode import *\n# Import build123d library to be able to use build123 commands\nfrom build123d import *\n\n# Define an x and y value for the rectangle\nx=20\ny=10\n\n# Start the Sketch builder which creates 2D sketch objects\nwith BuildSketch() as RectangleAsSketch:\n  Rectangle(x,y)\n\n# Show all created objects which is only RectangleAsSketch\nshow_all()\n</code></pre> <p>This gives the same sketch object as the one we created with RectangleOfLines. You might notice that we needed less information AND that this object will now be centered at the origin (x=0,y=0). All objects will normally be build by being centered as each object has an additional property called \"alignt\" which has as default the center option. So to make it truly equal we have to adjust it's placing.</p>"},{"location":"Primitives/2D%20Objects/2D%20Rectangle/#placing-with-align","title":"Placing with \"align\"","text":"<pre><code># Import ocp_vscode which is an addon to view the 3D model in VScode\nfrom ocp_vscode import *\n# Import build123d library to be able to use build123 commands\nfrom build123d import *\n\n# Define an x and y value for the rectangle\nx=20\ny=10\n\n# Start the Sketch builder which creates 2D sketch objects\nwith BuildSketch() as RectangleAsSketch:\n  # Create a Rectangle and change it's alignment property\n  Rectangle(x,y,align=(Align.MIN,Align.MIN))\n\n# Show all created objects which is only RectangleAsSketch\nshow_all()\n</code></pre> <p>The \"align=\" options you can choose from are:</p> <ul> <li>Align.MIN</li> <li>Align.MAX</li> <li>Align.CENTER</li> </ul> <p>You can use each of these options for one of the 2 paramters of the \"align=\" statement.</p>"},{"location":"Primitives/2D%20Objects/2D%20Rectangle/#placing-with-the-position-property-of-the-object","title":"Placing with the position property of the object","text":""},{"location":"Primitives/2D%20Objects/2D%20Rectangle/#placing-with-the-pos-command","title":"Placing with the POS() command","text":""},{"location":"Primitives/2D%20Objects/2D%20Rectangle/#other-options-to-create-a-rectangle-or-a-edged-2d-shape","title":"Other options to create a rectangle or a edged 2D shape","text":"<p>Other ways to create a rectangle is to use the Rectangle, Polygon,  RegularPolygon or Trapezoid.</p> <p>See: Polygon</p> <p>See: RegularPolygon</p> <p>See: Trapezoid</p>"},{"location":"Primitives/3D%20Objects/3D%20Cube/","title":"3D Cube","text":"<p>There are several ways to create a 3D cube. For build123d a cube will be called a box.</p>"},{"location":"Primitives/3D%20Objects/3D%20Cube/#extruded-rectangle-of-lines","title":"Extruded rectangle of lines","text":"<p>This example is a continuation of the rectangle of lines where we started by creating a rectangle out of lines, making a sketch (2D object) out of it and now as a final step we will extrude this 2D object to get a 3D object.</p> <p>For most 3D primitives there is a direct way to create them.</p> <p>Extruding is simple. We need a new builder \"BuildPart()\" and one new command \"extrude\".</p> <pre><code># Import ocp_vscode which is an addon to view the 3D model in VScode\nfrom ocp_vscode import *\n# Import build123d library to be able to use build123 commands\nfrom build123d import *\n\n# Define an x and y value for the rectangle\nx=20\ny=10\n\n# Start the Part builder which creates 3D part objects\nwith BuildPart() as RectangleAsPart:\n    # Start the Sketch builder which creates 2D sketch objects\n    with BuildSketch() as RectangleAsSketch:\n        # Start the Line Builder and define the name of the finished line object as RectangleOfLines\n        with BuildLine() as RectangleOfLines:\n            # Define first line\n            Line((0,0),(x,0))\n            # Define second line\n            Line((x,0),(x,y))\n            # Define third line\n            Line((x,y),(0,y))\n            # Define fourth and last line to close the rectangle shape\n            Line((0,y),(0,0))\n        # Create a face from your RectangleOfLines object. Lines must be closed to encompass a closed area.\n        make_face()\n    # Extrudes our 2D object to a hight of 4\n    extrude(amount=4)\n# Show all created objects which is RectangleAsPart\nshow_all()\n</code></pre> <p>As you can see we added \"BuildPart()\" in line 11 and extrude in line 26. As extrude has a few more possible parameters we need to make sure build123d knows that we use the \"amount\" parameter. That is why we write amount=4 to extrude our rectangle to a hight of 4.</p>"},{"location":"Primitives/3D%20Objects/3D%20Cube/#making-a-3d-cube","title":"Making a 3D cube","text":"<p>Build123d also has a box command which will create a 3D cube directly.</p> <pre><code># Import ocp_vscode which is an addon to view the 3D model in VScode\nfrom ocp_vscode import *\n# Import build123d library to be able to use build123 commands\nfrom build123d import *\n\n# Define an x and y value for the rectangle\nx=20\ny=10\nz=4\n\n# Start the Part builder which creates 3D part objects\nwith BuildPart() as RectangleAsPart:\n    # Creat a 3D cube\n    Box (x,y,z)\n# Show all created objects which is RectangleAsPart\nshow_all()\n</code></pre>"},{"location":"Setup%20of%20the%20working%20enviroment/Foreword%20working%20environment/","title":"Foreword working environment","text":"<p>I found out that github offers the possibility to host static web sites. I am currently following up a hand full of projects of my own and as most of them are new to me I have my own unique view on them and my own problems to understand certain aspects.</p> <p>In short I am a noob :)</p> <p>The internet has a vast fundus of information but learning requires repetition. To be able to repeat you need to document and many times in your own words and explanations. So I decided to set up my own documentation and to share it on the internet - so maybe someone else might also profit.</p> <p>Most projects require a certain working enviroment setup. Beeing a noob most often allready setting up a working enviroment is a challenge.</p> <p>I currently still use mostly windows so unless I switch to linux or do a parallel setup you probably will find a windows solution.</p> <p>Most important though I prefere a stand alone solution or portable version as it is most often called.  There are 3 reasons I prefere a portable setup:</p> <ol> <li>A portable version allows for easy deletion if I decide to no longer use a certain setup.</li> <li>It allows me to experiment with similar but slightly different setups without messing up my currently activly used setup.</li> <li>I can give it to a friend with ease</li> </ol>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/","title":"MkDocs portable Installation","text":"<p>(not necessary for build123d)</p> <p>MkDocs is a python solution to build static websites from markdown files. I am using Obsidian MD for my notetaking. So my intention was to just document once in Obsidian MD and to create my static documentation website from one source in one workflow. Once I reviewed the static website and once I am satisfied with the website I can go on and publish it to github. </p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#1-python-enviroment-for-mkdocs","title":"1) Python enviroment for MkDocs","text":"<p>Download WinPython 3.11.8 from Sourceforge: WinPython - 3.11.8</p> <p>You find all WinPython Versions under this link: WinPython</p> <p>WinPython is a portable setup of the Python runtime enviroment for windows. After downloading the file double click it (and thus execute it). You might need to tell windows or your browser that the file is safe and that you want to keep it and that you want to execute it.</p> <p>After starting you will be asked to extract it. Choose a location where you want your files to be extracted to. For example: D:\\Portable_MkDocs</p> <p>Thats it your Python enviroment is setup and ready to run.</p> <p>Go into the directory where you installed your Python enviroment (D:\\Portable_MkDocs\\WPy64-31180) and start \"WinPython Powershell Prompt.exe\".</p> <p>This will open the windows Powershell. You can check your Python version by typing: python --version.  Also check if your paket manager pip is installed by typing:  pip --version</p> <p></p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#2-install-mkdocs","title":"2) Install MkDocs","text":"<p>Website MkDocs: MkDocs</p> <p>To install MkDocs you need to install it with a paket manager into your python environment. To do so we will use pip which is the pre installed paket manager in WinPython.</p> <p>Type: pip install mkdocs</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#3-install-a-theme","title":"3) Install a Theme","text":"<p>For my documentation the material theme seemed most usefull. Material is a theme which is widely used and also supported by many plugins.</p> <p>You find informations for the material theme here: Material theme</p> <p>To install type: pip install mkdocs-material</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#4-install-plugins","title":"4) Install plugins","text":"<p>I installed several plugins which extend and enhance MkDocs</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#roamlinks-plugin","title":"Roamlinks plugin","text":"<p>This plugin allows to keep the links you defined in your markdown and change them to working links in your static site. You find the plugin here: mkdocs-roamlinks-plugin Install the plugin by typing: pip install mkdocs-roamlinks-plugin</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#awesom-pages-plugin","title":"Awesom pages plugin","text":"<p>This plugin allows to configure your page navigation, your page naming and your page configuration in more detail. You find the plugin here: awesome-pages-plugin Install the plugin by typing: pip install mkdocs-awesome-pages-plugin</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#mkdocs-callouts-plugin","title":"Mkdocs callouts plugin","text":"<p>This plugin allows to render your obsidian markdown callouts into html. You find the plugin here: mkdocs-callouts Install the plugin by typing: pip install mkdocs-callouts</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#5-configuring-mkdocs-and-creating-a-static-website","title":"5) Configuring MkDocs and creating a static website","text":"<p>To create your first project go into the directory where you installed your Python enviroment (D:\\Portable_MkDocs\\WPy64-31180) and start \"WinPython Powershell Prompt.exe\".</p> <p>In the windows powershell type:  mkdocs new Testproject</p> <p>This will create a new project and a new directory \"Testproject\". You will find this new directory and your Projektfiles in  \"D:\\Portable_MkDocs\\scripts\\Testproject\"</p> <p>Type: cd Testproject This let's you change into the Testproject directory.</p> <p>You need to create a YAML file in the Testproject directory. This file is reponsible for defining the parameters how MkDocs builds your static website.  </p> <p>For details see: Setup - Material for MkDocs</p> <pre><code>site_name: Build123d for noobs\nsite_url:  https://cepeu.github.io/build123-for-noobs/\nuse_directory_urls: true\n\ntheme:\n    name: material\n    highlightjs: true\n    sticky_navigation: true\n    #repo_url: https://github.com/CePeU/build123d\n    features:\n        - search.highlight # Highlight all occurences of search after selecting link\n        - search.share # allows for a share button after searching\n        #- header.autohide # hides the header uppon scrolling use for more screen size?\n        - content.code.copy # Renders a copy button in the code block\n        #- content.code.select\n        #- content.code.annotate\n        - navigation.path\n        - toc.integrate # Integrates the left side table of content into the navigation to the right\n        #- toc.follow # Not sure yet what it does\n        - navigation.top # Back to top button is rendered uppon startin to scroll back to top\n        - navigation.tabs # top-level sections are rendered at the TOP in a menu layer below the header for viewports above 1220px, but remain as-is on mobile\n        - navigation.tabs.sticky # scrolling does not \"hide\" tabs\n        #- navigation.sections # groups first/second level into groups but disables folding. Looks nice but gets too long\n        #- navigation.expands # will expand alls collapsed subsection as default\n        #- navigation.prune # Will need to considere if site gets above 100+ pages\n\nmarkdown_extensions:\n    - toc:\n        toc_depth: 4 # increase toc depth to 4\n        permalink: true # Can add a anchor link\n    - pymdownx.highlight:\n    #    anchor_linenums: true\n    #    line_spans: __span\n    #    pygments_lang_class: true\n    #- pymdownx.inlinehilite # python code block highlighting?\n    #- pymdownx.snippets\n    - nl2br\n    - admonition\n    - pymdownx.details\n    - pymdownx.superfences # adds linenumbers!\n\nplugins: \n  - search: # Enables search. If plugins are used search must be explicitly enabled\n        lang: en # the site language will be english so searching in english makes sense\n  #- privacy # Loads all external assets before build\n  - roamlinks # Plugin for translating markdown links to local and external links\n  - callouts\n</code></pre> <p>Type mkdocs serve This starts a local webserver and generates your website from the markdown files found in \"D:\\Portable_MkDocs\\scripts\\Testproject\".  </p> <p>You can see the newly generated website by opening a browser and typing localhost:8000</p> <p>See more details also on the MkDocs website: Getting Started - MkDocs</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#7-getting-your-obsidian-markdown-files-to-mkdocs","title":"7) Getting your Obsidian markdown files to MkDocs","text":"<p>Currently I use an Obsidian community plugin: \"markdown-export\"</p> <p>Github: markdown-export</p> <p>The file structure of the local export directory needs to be:</p> <pre><code>Testproject     --&gt; mkdocs.yml\n  |-- .git     --&gt; for git integration\n  |-- .cache --&gt; will be created by mkdocs during export\n  |-- docs   --&gt; index.md\n  |      |-- subfolders  --&gt; keeping additional markdown files\n</code></pre> <p>As I needed some adjustment in the export files so that screenshots are correctly included into my static html I had to extend the plugin with a regex/replace ability. Currently that is pending pull request and I am not acquainted enough yet with github and the whole toolchain to publish it on my own. It took me allready some time to figure out how to setup TypeScript for Obsidian MD and how to improve the plugin.</p> <p>Tip</p> <p>The index.md in the docs directory NEEDS to be written as shown! The file is case sensitive you NEED to use a lowercase \"i\" --&gt; index.md</p>"},{"location":"Setup%20of%20the%20working%20enviroment/MkDocs%20Installation/MkDocs%20portable%20Installation/#8-creating-your-static-website-to-deploy-to-github","title":"8) Creating your static Website to deploy to github","text":"<p>I take my notes in a documentation folder in Obsidian MD. I adjusted the markdown-export plugin to have an output directory into the MkDocs Testproject/docs folder and export into that folder.  Then I start Mkdocs and build the static site typing: mkdocs serve</p> <p>After controlling the build static website I upload it to github by typing mkdocs gh-deploy</p> <p>Future improvements: - Improve markdown export with a profile setting - maybe use another plugin Github Publisher (but I did not figure out yet if you can export localy) - Setup a workflow on Github to build everything there from markdown files  </p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/OCP%20Viewer%20adjustments/","title":"OCP Viewer adjustments","text":""},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/OCP%20Viewer%20adjustments/#general-ocp-viewer-setup","title":"General OCP Viewer Setup","text":"<p>You can influence how the OCP Viewer works. There are some settings which I find very helpfull.</p> <p>This is the setup I use as a template for starting a build123d project.</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, ortho=True, black_edges=True,measure_tools=True)\ncolors = [\"red\",\"blue\",\"pink\",\"green\",\"orange\",\"indigo\",\"yellow\",\"grey\",\"white\"]\n\nshow_all(colors=colors)\n</code></pre> <p>Explanation</p> <p>Line 1:  This imports the code needed for build123</p> <p>Line 2: This imports the code needed for OCP Viewer</p> <p>Line 3: Camera.Keep: This will keep the perspective of the camera even after you changed your code and after letting it run again. ortho=True: black_edges=True: This will outline the outer edges more starkly measure_tools=True: This will add measure tools.</p> <p>Line 4: This will color each new object in the color mentionen (so first is red, second is blue etc.)</p> <p>Line 5: Write your code here</p> <p>Line 6: Shows all objects and colors them.</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/OCP%20Viewer%20adjustments/#ocp-color-setup","title":"OCP Color Setup","text":"<p>You can also define your own colors. You need to define them as RGB colors for example like this:</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, ortho=True, black_edges=True,measure_tools=True)\ncolors = [(0,0,255),(0,255,0),(255,0,0)]\n\nshow_all(colors=colors)\n</code></pre> <p>You can also use hex values like 0xFf8833</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/OCP%20Viewer%20adjustments/#colormap-setup","title":"Colormap Setup","text":"<p>Choosing Colormaps in Matplotlib \u2014 Matplotlib 3.8.4 documentation</p> <pre><code>from matplotlib import colormaps\nlist(colormaps)\n</code></pre>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Using%20Fossil%20%28work%20in%20progress%29/","title":"Using Fossil (work in progress)","text":"<p>Fossil is a source control system similar to git. Of course there are differences else you could use git ;).</p> <p>I am currently experimenting with it. It looks to be easier to handle for me as beginner and as it is database based all files are saved in one database file which I can probably distribute and backup easier.</p> <p>You can download it here: Fossil: Fossil Quick Start Guide (fossil-scm.org)</p> <p>There is a Visual Studio Code plugin for fossil. Fossil - Visual Studio Marketplace</p> <p>As Fossil is a single executable I copy it into the same path where my git.exe resides.</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Using%20Git%20%28work%20in%20progress%29/","title":"Using Git (work in progress)","text":"<p>Work in Progress</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Using%20Git%20%28work%20in%20progress%29/#setting-up-a-github-access","title":"Setting up a Github access","text":""},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Using%20Git%20%28work%20in%20progress%29/#git-commands","title":"Git commands","text":""},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/","title":"Visual Studio Code Windows Portable Setup for build123d","text":""},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#1-python-enviroment-for-build123d","title":"1) Python enviroment for build123d","text":"<p>Download WinPython 3.11.8 from Sourceforge: WinPython - 3.11.8</p> <p>You find all WinPython Versions under this link: WinPython</p> <p>WinPython is a portable setup of the Python runtime enviroment for windows. After downloading the file double click it (and thus execute it). You might need to tell windows or your browser that the file is safe and that you want to keep it and that you want to execute it.</p> <p>After starting you will be asked to extract it. Choose a location where you want your files to be extracted to. For example: D:\\Portable_build123d</p> <p>Thats it your Python enviroment is setup and ready to run.</p> <p>To verify go into the directory where you installed your Python enviroment (D:\\Portable_MkDocs\\WPy64-31180) and start \"WinPython Powershell Prompt.exe\".</p> <p>This will open the windows Powershell. You can check your Python version by typing: python --version. Also check if your paket manager pip is installed by typing:  pip --version</p> <p></p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#2-install-visual-studio-code","title":"2) Install Visual Studio Code","text":"<p>Next you need to download Visual Studio Code but you need to select the ZIP version for X86: Download Visual Studio Code</p> <p>Extract the downloaded file into the Folder D:\\Portable_build123d\\WPy64-31160\\t</p> <p>After extracting the files create a \"data\" directory in D:\\VSCodePython\\WPy64-31160\\t</p> <p>The \"data\" directory is needed to make VSCode portable. It is needed for config files and extensions which VSCode will save there.</p> <p>Start Visual Studio Code by double clicking on VS Code.exe in your path D:\\VSCodePython\\WPy64-31160\\</p> <p>Finish the assistant to your liking. This will show you if Visual Studio Code works and it will also create your settings.json for Visual Studio. After confirming that it works close/exitVisual Studio again.</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#3-install-git-portable","title":"3) Install Git Portable","text":"<p>Next download Git Portable. Select the \"64-bit Git fot Windows Portable\" Version: 64-bit Git for Windows Portable</p> <p>As it is a portable version you can extract it anywhere you want. But it is a good idea to put it into the same folder as your other files. As all Visual Studio Code data ist saved into the data folder I will install Git also into the data folder.</p> <p>D:\\Portable_build123d\\WPy64-31180\\t\\data\\Git</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#4-prepare-your-working-environment","title":"4) Prepare your working environment","text":"<p>Start Visual Studio Code again: D:\\VSCodePython\\WPy64-31160\\VS Code.exe</p> <p>We will use it as editor to adjust some files:</p> <p>First we will modify \"winpython.ini\" which you will find in D:\\VSCodePython\\WPy64-31160\\settings</p> <p>Mine looked like this: <pre><code>[debug]\nstate = disabled\n\n[environment]\n#HOME = %HOMEDRIVE%%HOMEPATH%\\Documents\\WinPython%WINPYVER%\n#USERPROFILE = %HOME%\n#JUPYTER_DATA_DIR = %HOME%\n#JUPYTERLAB_SETTINGS_DIR = %HOME%\\.jupyter\\lab\n#JUPYTERLAB_WORKSPACES_DIR = %HOME%\\.jupyter\\lab\\workspaces\n#WINPYWORKDIR = %HOMEDRIVE%%HOMEPATH%\\Documents\\WinPython%WINPYVER%\\Notebooks\n</code></pre></p> <p>Add the following line to the enviroment section PATH=%PATH%;D:\\Portable_build123d\\WPy64-31180\\t\\data\\Git\\bin</p> <pre><code>[debug]\nstate = disabled\n[environment]\nPATH=%PATH%;D:\\Portable_build123d\\WPy64-31180\\t\\data\\Git\\bin\n#HOME = %HOMEDRIVE%%HOMEPATH%\\Documents\\WinPython%WINPYVER%\n#USERPROFILE = %HOME%\n#JUPYTER_DATA_DIR = %HOME%\n#JUPYTERLAB_SETTINGS_DIR = %HOME%\\.jupyter\\lab\n#JUPYTERLAB_WORKSPACES_DIR = %HOME%\\.jupyter\\lab\\workspaces\n#WINPYWORKDIR = %HOMEDRIVE%%HOMEPATH%\\Documents\\WinPython%WINPYVER%\\Notebooks\n</code></pre> <p>This will add a path to your portable GIT installation (adjust the path according to where you installed your portable git).</p> <p>To make it truly portable you also can add a windows batch file which you start each time you change your files to another drive. It will write the winpython.ini with the correct path.</p> <p>Mine looks like this and I saved it into the D:\\VSCodePython\\WPy64-31160\\ path (where you also find the VS Code.exe)</p> <pre><code>set drivepath=%CD%\nset OutputTo=%drivepath%\\settings\\winpython.ini\nren %drivepath%\\settings\\winpython.ini winpython.old\necho [debug]&gt;%OutputTo%\necho state = disabled&gt;&gt;%OutputTo%\necho [environment]&gt;&gt;%OutputTo%\necho PATH=%%PATH%%;%drivepath%\\t\\data\\Git\\bin&gt;&gt;%OutputTo%\nstart \"\" \"VS Code.exe\"\n</code></pre> <p>You can also modify your settings.json for Visual Studio Code which with some lines I find helpfull. Adjust the Visual Studio code settings.json which you fill find at: D:\\Portable_build123d\\WPy64-31180\\t\\data\\user-data\\User</p> <p>Create a settings file or adjust it as you deem fit (adjust your paths if needed)</p> <pre><code>{\n    \"security.workspace.trust.untrustedFiles\": \"open\",\n    \"git.enabled\": true,\n    \"workbench.colorCustomizations\": {\n        \"editor.lineHighlightBackground\": \"#ffffff36\",\n        \"editor.lineHighlightBorder\": \"#ffff00\"\n    \u00a0}\n}\n</code></pre> <p>Line 2: Do not forget to set a comma at the end! If this was the only line in your settings.json the comma is probably not set. Line 3: git.enabled will tell Visual Studio Code that it can use git Line 4: workbench.colorCustomizations changes how your cursor line looks. You can change the Hex Numbers to get different colors for background and border</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20Windows%20Portable%20Setup%20for%20build123d/#5-install-visual-studio-code-extensions","title":"5) Install Visual Studio Code extensions","text":"<p>Test that VSCode starts by using/starting: D:\\VSCodePython\\WPy64-31160\\VS Code.exe</p> <p>VSCode.exe works as a starter for VScode which was included by Winpython.</p> <p>Open the extension manager with CTRL+SHIFT+X</p> <p>Search for the Visual Studio Code Extension \"Python\" and install it.</p> <p>Install the Visual Studio Code Extension \"OCP CAD Viewer\"</p> <p>After installing the OCP CAD Viewer extension you will find a new icon \"OCP\". Select the OCP Icon and install build123d and/or Quickstart CadQuery</p> <p></p> <p>Follow the instructions to use OCP CAD Viewer extension to install Cadquery/build123 which will install the different necessary python packages using pip.</p> <p>Thats it. Remember to add \" from ocp_vscode import * \" to your Cadquery/build123d files to be able to use OCP Cad Viewer.  This should be the two first lines.</p> <pre><code>from ocp_vscode import *\nfrom build123d import *\n</code></pre> <p>A template I use looks like this:</p> <pre><code>from build123d import *\nfrom ocp_vscode import *\nset_defaults(reset_camera=Camera.KEEP, ortho=True, black_edges=True,measure_tools=True)\ncolors = [\"red\",\"blue\",\"pink\",\"green\",\"orange\",\"indigo\",\"yellow\",\"grey\",\"white\"]\n\nshow_all(colors=colors)\n</code></pre> <p>Your code goes on line 5.</p> <p>Have fun.</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20extensions%20and%20adjustments/","title":"Visual Studio Code extensions and adjustments","text":""},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20extensions%20and%20adjustments/#visual-studio-code-extensions","title":"Visual Studio Code extensions","text":"<p>Extenstions are a purely subjective matter. Still some ideas might come from this for anybody reading this.</p> <p>frame-indent-rainbow: frame-indent-rainbow - Visual Studio Marketplace         A plugin to show code blocks by color</p> <p>OCP-CAD Viewer: OCP CAD Viewer - Visual Studio Marketplace</p> <p>Pylance: Pylance - Visual Studio Marketplace </p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20extensions%20and%20adjustments/#visual-studio-code-adjustments","title":"Visual Studio Code adjustments","text":""},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20extensions%20and%20adjustments/#helpfull-shortcuts","title":"Helpfull shortcuts","text":""},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20extensions%20and%20adjustments/#adjust-keybinding","title":"Adjust Keybinding","text":"<p>Type CTR+K and S Search for: \"Python: Run Python File in Terminal\"</p> <p></p> <p>Set the Keybinding to run python with a shortcut.  First by selecting and right clicking select the \"Change When Expression\" column.</p> <p>Change the when expression to: editorTextFocus &amp;&amp; !findInputFocussed  &amp;&amp; editorLangId == 'python'</p> <p>Change the Keybinding (for example SHIFT+ENTER). </p> <p>Adjust the Keybinding for SHIFT+ENTER for \"Python: Run Selection/Line in Python Terminal\" to ALT+ENTER or something different.</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20extensions%20and%20adjustments/#coding-shortcuts","title":"Coding Shortcuts:","text":"mark block STRG+SHIFT+ArrowDown mark whole word STRG+SHIFT+ArrowRight duplicate STRG+D autocomplete suggestions CTRL+SPACE search STRG+F GLOBAL search STRG+SHIFT+F Search and replace STRG+H search for files STRG+P Insert line above current line CTRL+SHIFT+ENTER Insert line under current line SHIFT+ENTER Change selected lines to comments CTRL+# Debuger Use debuger F5 Set breakpoint F9 jump to function definition F12 rename function in whole code F2 <p>Debuger: A debug toolbar appears along the top with the following commands from left to right: continue (F5), step over (F10), step into (F11), step out (Shift+F11), restart (Ctrl+Shift+F5), and stop (Shift+F5).</p> <p>Link: Get Started Tutorial for Python in Visual Studio Code</p> <p>CTRL+Shift+X: Open extensions view Shift+Enter: Run selected lines</p>"},{"location":"Setup%20of%20the%20working%20enviroment/Visual%20Studio%20Code%20Setup/Visual%20Studio%20Code%20extensions%20or%20adjustments/","title":"Visual Studio Code extensions or adjustments","text":"<p>Extenstions are a purely subjective matter. Still some ideas might come from this for anybody reading this.</p> <p>frame-indent-rainbow: frame-indent-rainbow - Visual Studio Marketplace         A plugin to show code blocks by color</p> <p>OCP-CAD Viewer: OCP CAD Viewer - Visual Studio Marketplace</p> <p>Pylance: Pylance - Visual Studio Marketplace </p>"}]}